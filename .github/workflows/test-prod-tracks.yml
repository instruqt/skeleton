##############################################################################
# Instruqt Github Actions Workflow
#
# This workflow file and its actions will run a validate/push/test cycle on
# all the tracks in your $TRACK_DIR repo. We recommend calling this instruqt-tracks.
# All the tracks in each directory must belong to the same organization.
#
# Tracks tagged with no-ci, skip-ci or ci-skip will be skipped.
#
# This workflow will run whenever you merge changes to the main branch.
##############################################################################
name: test-prod-tracks

env:
  # Store your Instruqt API key and track directory as a secret
  # and variable in your Github repo.
  TRACK_DIR: ${{ vars.TRACK_DIR }}
  INSTRUQT_TOKEN: ${{ secrets.INSTRUQT_TOKEN }}
  # Leave this alone, it will be auto-populated.
  TRACKS: ""

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  # Uncomment to run weekly tests on Sunday at 5am UTC
  # schedule:
  #   - cron:  '0 5 * * 0'
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  GetTracks:
    runs-on: ubuntu-latest
    steps:

    - name: Check out repository code
      uses: actions/checkout@v3
    
    - name: Install yq Package
      uses: ./.github/actions/install-yq

    - name: Create Matrix Data
      run: |
        function skip_enabled() {
          if ! [[ -f "$1/track.yml" ]]; then
              echo "Error: $1 is not a valid track directory"
              return 1
          fi
      
          # Run the yq command to check the tags array and return the result
          yq_result=$(yq '.tags | any_c(test("(?i)no-ci|skip-ci|ci-skip"))' "$1/track.yml")
          echo $yq_result
        }

        cd $TRACK_DIR
        for t in $(ls -d *); do
          if [[ $(skip_enabled $t) == 'true' ]]; then
            echo "Skip CI tag found, skipping $t"
          else
            echo "Adding $t to test matrix"
            CI_TRACKS+=("$t")
          fi
        done

        # This mess creates a string of properly escaped JSON for the next job to use.
        escaped_json_string=$(printf "%s\n" "${CI_TRACKS[@]}" | jq -R -s -c 'split("\n")[:-1]' | sed 's/"/\\\"/g')
        echo $escaped_json_string
        echo TRACKS="{\\\"tracks\\\":$escaped_json_string}" >> $GITHUB_ENV

    - id: set-matrix
      run: |
        echo "matrix=${{ env.TRACKS }}" >> $GITHUB_OUTPUT
        echo $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  TestProdTracks:
    runs-on: ubuntu-latest
    # This action is allowed to run on the main/master branch.
    # We only run this job if the tracks matrix is not empty.
    if: ${{ needs.GetTracks.outputs.matrix != '{"tracks":[""]}' && needs.GetTracks.outputs.matrix != '' }}
    needs: GetTracks
    strategy:
      matrix: ${{ fromJson(needs.GetTracks.outputs.matrix) }}
    steps:
      # Detect the default branch name to ensure this is run on main/master
      # At this point we are post-merge and all changes are committed to main.
      # This workflow tests your tracks to ensure the merge did not break them.
      - name: Determine default branch
        run: echo "{default-branch}={GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        id: default-branch

      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.default-branch.outputs.default-branch }}

      - name: Validate Track
        id: validate-track
        uses: ./.github/actions/validate-track
        with:
          path: ${{ env.TRACK_DIR }}/${{ matrix.tracks }}
      
      - name: Push Track
        id: push-track
        uses: ./.github/actions/push-track
        with:
          path: ${{ env.TRACK_DIR }}/${{ matrix.tracks }}
        if: steps.validate-track.outcome == 'success'
      
      - name: Test Track
        id: test-track
        uses: ./.github/actions/test-track
        with:
          path: ${{ env.TRACK_DIR }}/${{ matrix.tracks }}
        if: steps.push-track.outcome == 'success'